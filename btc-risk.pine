// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Inspired by Benjamin Cowen's BTC risk idea and BitcoinRaven's oscillators
// Â© Nick Petalas

//@version=5
indicator("Risk Metric: BTCUSD")

normalize(data) =>
    var min =  10e10
    var max = -10e10
    min := math.min(nz(data, min), min)
    max := math.max(nz(data, max), max)
    (data - min) / (max - min)
    
// normalize based on BTC market cycles
normalizeByMarketCycle(data) =>
    d1 = time <= timestamp('2011-10-19') ? data : na
    d2 = time > timestamp('2011-10-19') and time <= timestamp('2015-01-14') ? data : na
    d3 = time > timestamp('2015-01-14') and time <= timestamp('2018-12-15') ? data : na
    d4 = time > timestamp('2018-12-15') ? data : na
    normalized = not na(d1) ? normalize(d1) : (not na(d2) ? normalize(d2) : (not na(d3) ? normalize(d3) : (not na(d4) ? normalize(d4) : na)))
        
    

src = input.source(close, title="Source")

// experimental
normalizeStrategy(data) =>
    // multi = math.log((time-1279324800000)/1000/60/60/24) 
    // adjustedForTime = multi * normalize(data)
    // normalize(adjustedForTime)
    normalizeByMarketCycle(data)
    
///// DAILY_OVER_WEEKLY_EMA ///// 
lengthD = input(5, title="DMA Period Length (50 for smoother slopes, 5 for precision and volatility)")
lengthM = input(50, title="WMA Period Length (50 recommended)")
daily = request.security(syminfo.tickerid, "D", ta.ema(src, lengthD))
weekly = request.security(syminfo.tickerid, "W", ta.ema(src, lengthM))
DAILY_OVER_WEEKLY_EMA = normalizeStrategy(daily / weekly)

///// MAYER_MULTIPLE ///// 
mm = src / ta.sma(src, 200)
MAYER_MULTIPLE = normalizeStrategy(mm)

///// SHARPE ///// FIXME
s_len = 356
ret = ta.change(src)
s = (ta.sma(ret, s_len) - 1) / ta.stdev(ret, s_len)
SHARPE = normalizeStrategy(s)

///// PRICE_OVER_52W_MA ///// 
PRICE_OVER_52W_MA = normalizeStrategy(src / ta.ema(src, 365))

///// RISK_400_MA /////
RISK_400_MA = normalizeStrategy(src / ta.ema(src, 400))

///// AVG ///// 
AVG = (DAILY_OVER_WEEKLY_EMA + MAYER_MULTIPLE + SHARPE + PRICE_OVER_52W_MA + RISK_400_MA) / 5.0

///// POWER_LAW ///// 
plaw = math.log10(src) - ta.linreg(src, 265, 0) // FIXME
POWER_LAW = normalizeStrategy(plaw)


///// PLOT ///// 
red = #FF0000AA
green = #00FF00AA
avgColor = color.from_gradient(AVG, 0, 1, green, red)

showOscillators = input(false, title="Show Oscillators?")
oscillatorColor = showOscillators? #FFFFFF50 : na


avg = plot(AVG, title="AVG", color=avgColor, linewidth=3)
plot(DAILY_OVER_WEEKLY_EMA, title="DAILY_OVER_WEEKLY_EMA", color=oscillatorColor)
plot(MAYER_MULTIPLE, title="MAYER_MULTIPLE", color=oscillatorColor)
plot(SHARPE, title="SHARPE", color=oscillatorColor)
plot(PRICE_OVER_52W_MA, title="PRICE_OVER_52W_MA", color=oscillatorColor)
plot(RISK_400_MA, title="RISK_400_MA", color=oscillatorColor)
// plot(POWER_LAW, title="POWER_LAW", color=color.yellow)

SELL_LIMIT = 0.9
BUY_LIMIT = 0.1

bullcolor = AVG < BUY_LIMIT  ?  green    : na
bearcolor = AVG > SELL_LIMIT ?  red  : na


sell = plot(SELL_LIMIT, title="", color=#FF0000AA,   linewidth=1)
buy = plot(BUY_LIMIT, title="",  color=#00FF00AA, linewidth=1)
// fill(avg, sell, bearcolor, title="sell")
// fill(buy, avg, bullcolor, title="buy")



///// EXTRA LINES ///// 
plot(1,     title="",  color=#FF0000FF, linewidth=1)
plot(0.8,   title="",  color=#FF000080, linewidth=1)
plot(0.7,   title="",  color=#FF000040, linewidth=1)
plot(0.5,   title="",  color=#00FF0020, linewidth=1)
plot(0.4,   title="",  color=#00FF0020, linewidth=1)
plot(0.3,   title="",  color=#00FF0040, linewidth=1)
plot(0.2,   title="",  color=#00FF0080, linewidth=1)
plot(0,     title="",  color=#00FF00FF, linewidth=1)

